<?php

/**
 * @file
 * Module file for the Panels curator module.
 */

/**
 * Implements hook_menu().
 */
function panels_curator_menu() {
  $items = array();
  $items['admin/config/user-interface/panels'] = array(
    'title' => 'Panels curator',
    'description' => 'Configure panels buckets and groups',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('panels_curator_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'panels_curator.admin.inc',
  );
  return $items;
}

/**
 * Implements template_preprocess_panels_add_content_modal().
 */
function panels_curator_preprocess_panels_add_content_modal(&$vars) {
  // Get our curated categories from the admin configurations.
  $curated_categories = variable_get('panels_curator_categories', '');
  $curated_categories = array_filter(explode(',', $curated_categories));
  if (!empty($curated_categories)) {
    $categories = array();
    foreach ($curated_categories as $key => &$category) {
      if (!is_array($category)) {
        $key = $category;
        $regions = variable_get('panels_curator_regions_' . $key, '');
        $regions = array_filter(explode(',', $regions));
        $category = variable_get('panels_curator_' . $key, '');
        $category = unserialize($category);
        if (empty($regions) || !in_array($vars['region'], $regions)) {
          // Limit category groups to specific regions.
          continue;
        }
        elseif (!empty($category['content']) && $key != 'disabled') {
          // Only add groups that are not empty.
          $categories[$key] = $category;
        }
      }
    }

    // Include the re-usable category.
    if (isset($vars['categories']['re-usable-content'])) {
      $categories['re-usable-content'] = $vars['categories']['re-usable-content'];
    }

    $vars['categories'] = $categories;
  }
  // Remove all category group links and rebuild from the new category list.
  unset($vars['categories_array']);
  // Process the list of categories.
  foreach ($vars['categories'] as $key => $category_info) {
    // The 'root' category is actually displayed under the category group links.
    if ($key == 'root') {
      continue;
    }

    $class = 'panels-modal-add-category';
    if ($key == $vars['category']) {
      $class .= ' active';
    }

    $url = $vars['renderer']->get_url('select-content', $vars['region'], $key);
    $vars['categories_array'][] = ctools_ajax_text_button($category_info['title'], $url, '', $class);
  }
}

/**
 * Implements hook_form_alter().
 */
function panels_curator_form_alter(&$form, &$form_state, $form_id) {
  // Add a link to the panel revisions in the FPP edit form.
  if ($form_id == 'fieldable_panels_panes_fieldable_panels_pane_content_type_edit_form') {
    // Only show revisions for existing panels.
    if (isset($form['#entity']->fpid)) {
      $entity_id = $form['#entity']->fpid;
      $form['revision']['view_revisions'] = array(
        '#type' => 'item',
        '#markup' => l(
          t('View all panel revisions &raquo;'),
          'admin/structure/fieldable-panels-panes/view/' . $entity_id . '/revision',
          array('html' => TRUE)
        )
      );
    }

    // Hide extra link and view mode options.
    if (variable_get('panels_curator_hide_extras', FALSE)) {
      if (isset($form['link'])) {
        unset($form['link']);
      }
      if (isset($form['view_mode'])) {
        unset($form['view_mode']);
      }
    }
  }
  // Force re-usable panels into one group.
  if (isset($form['reusable'])) {
    $form['reusable']['category']['#disabled'] = TRUE;
    $form['reusable']['category']['#value'] = 'Re-usable content';
    $form['reusable']['category']['#default_value'] = 'Re-usable content';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function panels_curator_preprocess_page(&$vars) {
  // Check for panelizer default template settings.
  if (
    isset($vars['node']->panelizer) &&
    isset($vars['node']->panelizer_view_mode)
  ) {
    $panelizer_overrides = variable_get('panels_curator_override_displays', '');
    $panelizer_overrides = explode(',', $panelizer_overrides);
    // Check if the panelizer defaults should be overridden for this content type.
    if (in_array($vars['node']->type, $panelizer_overrides)) {
      $view_mode = $vars['node']->panelizer_view_mode;
      $display = !empty($vars['node']->panelizer) ? $vars['node']->panelizer[$view_mode]->display : FALSE;
      $default_display = variable_get('panels_curator_display_' . $vars['node']->type, 0);
      // If the current node is not the default template, use new duplicate panels and a new display.
      if (empty($vars['node']->panelizer[$view_mode]->did) && $vars['node']->nid != $default_display) {
        // Set the default template node if it is not already set.
        if (empty($default_display)) {
          variable_set('panels_curator_display_' . $vars['node']->type, $vars['node']->nid);
        }
        else {
          $new_display = panels_save_display($display);
          $vars['node']->panelizer[$view_mode]->display = &$new_display;
          foreach ($vars['node']->panelizer[$view_mode]->display->content as &$pane) {
            // Clone each FPP and then assign the new fpid.
            if ($pane->type == 'fieldable_panels_pane') {
              list($subtype, $fpid) = explode(':', $pane->subtype);
              if ($subtype == 'fpid') {
                // Clone the FPP object.
                $fpp = fieldable_panels_panes_load($fpid);
                if (!isset($fpp->fpid)) {
                  continue;
                }

                // Clean the some basic settings.
                $fpp->fpid = NULL;
                $fpp->created = NULL;
                $fpp->timestamp = NULL;

                // Save the cloned FPP.
                $newfpp = fieldable_panels_panes_save($fpp);

                // Update the FPP reference.
                $pane->subtype = 'fpid:' . $newfpp->fpid;
              }
            }
          }
          // Save and map the new display/panels to the node.
          $vars['node']->panelizer[$view_mode]->display_is_modified = TRUE;
          node_save($vars['node']);
          ctools_include('object-cache');
          ctools_object_cache_clear('panels_node_display_cache', $vars['node']->nid);
          // Reload the current page so that the panel IDs are accurate.
          drupal_goto(current_path());
        }
      }
      // Add css and js for IPE enhancements.
      if (isset($vars['node']->panelizer) && user_access('use panels in place editing')) {
        drupal_add_css(drupal_get_path('module', 'panels_curator') . '/css/panels_curator.css');
        drupal_add_js(drupal_get_path('module', 'panels_curator') . '/js/panels_curator.js', array('group' => JS_LIBRARY));
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Alter the IPE save control form to handle extra panels curator functionality.
 */
function panels_curator_form_panels_ipe_edit_control_form_alter(&$form, &$form_state) {
  // Add custom submit buttons based on current node and default template status.
  if (isset($form_state['panelizer entity'])) {
    $panelizer_overrides = variable_get('panels_curator_override_displays', '');
    $panelizer_overrides = explode(',', $panelizer_overrides);
    // Check if the panelizer defaults should be overridden for this content type.
    if (isset($form_state['panelizer entity']->nid) && in_array($form_state['panelizer entity']->type, $panelizer_overrides)) {
      $default_display = variable_get('panels_curator_display_' . $form_state['panelizer bundle'], 0);
      if ($form_state['panelizer entity']->nid == $default_display) {
        unset($form['buttons']['submit']);
      }
      else {
        $form['buttons']['revert_default']['#attributes']['class'] = array();
        $form['buttons']['revert_default']['#value'] = t('Revert to default');
        // Add a new button that redirects to the default node template for this bundle.
        $redirect_url = url('node/' . $default_display);
        drupal_add_js(array('panelizer' => array('view_default_url' => $redirect_url)), 'setting');
        $form['buttons']['view_default'] = array(
          '#type' => 'submit',
          '#value' => t('Edit default template'),
          '#attributes' => array(
            'class' => array(
              'panels-ipe-view-default'
            )
          ),
          '#id' => 'panels-ipe-default',
          '#access' => TRUE,
        );
      }
      // Hide the revision checkbox.
      if (isset($form['revision_information'])) {
        unset($form['revision_information']);
      }
    }
  }
}

/**
 * Helper function to load panels content from a node.
 */
function panels_curator_panel_view($node) {
  // Check for panels content on a node.
  if (isset($node->panelizer['page_manager']->display)) {
    // Display.
    $display = panels_load_display($node->panelizer['page_manager']->display->did);
    $render = panels_render_display($display);
    return $render;
  }

  // Otherwise, fall back.
  return drupal_render(node_view($node));
}

/**
 * Helper function to map the correct values for a variety of fields.
 */
function panels_curator_map_values($values, $content) {
  if (isset($values['value'])) {
    // Basic fields.
    $value = $values['value'];
  }
  elseif (isset($values['nid'])) {
    // Node reference fields.
    $node = node_load($values['nid']);
    $value = panels_curator_panel_view($node);
  }
  elseif (isset($values['entity']) && isset($values['entity']->nid)) {
    // Node entity reference fields.
    $nid = $values['entity']->nid;
    $node = node_load($nid);
    $value = panels_curator_panel_view($node);
  }
  elseif (isset($values['rgb'])) {
    // Color fields.
    $value = $values['rgb'];
  }
  elseif (isset($values['video_url'])) {
    $value = $values['video_url'];
  }
  elseif (isset($values['type']) && $values['type'] == 'image') {
    // Image fields.
    if (!empty($content['#image_style'])) {
      // Apply image styles if they are specified.
      $image_style = $content['#image_style'];
      $value = image_style_url($image_style, $values['uri']);
    }
    else {
      $value = file_create_url($values['uri']);
    }
  }
  elseif (isset($values['type']) && $values['type'] == 'video') {
    // Video fields.
    $value = file_create_url($values['uri']);
  }
  elseif (isset($values['url'])) {
    // Link fields.
    if (!empty($values['url']) || $content['#field']['settings']['url'] != 'optional') {
      $value = l($values['title'], $values['url'], array('attributes' => $values['attributes'], 'html' => $values['html']));
    }
    else {
      // Allow for plain text, non-links for optional link fields.
      $value = $values['title'];
    }
  }
  else {
    $value = t('Unmapped field');
  }

  return $value;
}

/**
 * Implements hook_preprocess_fieldable_panels_pane().
 */
function panels_curator_preprocess_fieldable_panels_pane(&$vars) {
  // Provide a clean canonical data array for front end fpp templates.
  if (variable_get('panels_curator_data_object', FALSE)) {
    // Automatic pane ID generation, based on pane title.
    $vars['pane_id'] = preg_replace('@[^a-z0-9-]+@','-', strtolower($vars['content']['title']['#value']));
    // Create an array of clean, canonical panel data values.
    $vars['output'] = array();
    foreach ($vars as $key => $item) {
      if (isset($vars['content'][$key])) {
        // Check for field collection fields.
        $field_collection = ($vars['content'][$key]['#field_type'] == 'field_collection');
        $output = array();
        $clean_key = str_replace('field_', '', $key);
        foreach ($item as $item_key => $values) {
          // Account for field collections.
          if ($field_collection) {
            $collection_output = array();
            $collection_entity = current($vars['content'][$key][$item_key]['entity']['field_collection_item']);
            // Get all values for each field in the field collection.
            foreach ($collection_entity as $collection_key => $collection_values) {
              // Check for fields inside of this field colleciton.
              if (is_array($collection_values) && isset($collection_values['#items'])) {
                $current_key = str_replace('field_', '', $collection_key);
                $current_output = array();
                // Account for multi-value fields in the field collection.
                foreach ($collection_values['#items'] as $current_key => $current_values) {
                  $current_output[] = panels_curator_map_values($current_values, $collection_values[$current_key]);
                }
                // Array of values or a single value.
                if (count($current_output) > 1 || is_array($current_output[0])) {
                  $collection_output[$collection_key] = $current_output;
                }
                else {
                  $collection_output[$collection_key] = implode('', $current_output);
                }
              }
            }
            $output[] = $collection_output;
          }
          else {
            $output[] = panels_curator_map_values($values, $vars['content'][$key][$item_key]);
          }
        }
        // Add the current item's values to the output array.
        if (count($output) > 1 || is_array($output[0])) {
          $vars['output'][$clean_key] = $output;
        }
        else {
          $vars['output'][$clean_key] = implode('', $output);
        }
      }
    }
  }
}
